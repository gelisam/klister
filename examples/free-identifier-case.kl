#lang "prelude.kl"

(import "let.kl")
(import (shift "prelude.kl" 1))
(import (shift "identifier.kl" 1))
(import (shift "dot-dot-dot.kl" 1))

(define-macros
  ([free-identifier-case
    (lambda (stx)
      (syntax-case stx ()
        [(_ ,scrut ,cases ...)
         (pure (replace-loc stx
                 `(let (x ,scrut) (free-identifier-case-aux x ,cases ...))))]))]
   [free-identifier-case-aux
    (lambda (stx)
      (syntax-case stx (else)
        [(_ ,scrut)
         (pure '(syntax-error '"Nothing matched"))]
        [(_ ,scrut ((else ,x) ,val))
         (pure (replace-loc x
                 `(let [,x ,scrut] ,val)))]
        [(_ ,scrut (,id ,val) ,cs ...)
         (pure (identifier? id))
         (pure (replace-loc val
                 `(>>= (free-identifier=? ,scrut ',id)
                       (lambda (eq)
                         (if eq
                             ,val
                             (free-identifier-case-aux ,scrut ,cs ...))))))]))]))

(export free-identifier-case)
