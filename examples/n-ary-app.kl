#lang kernel

[import [shift (only kernel cons-list-syntax lambda pure quote syntax-case list-syntax export import) 1]]



[define-macros
  -- (my-app f foo bar baz) => (((f foo) bar) baz)
  ([my-app
    [lambda [stx]
      (syntax-case stx
        [[cons _ fun-and-args]
         (syntax-case fun-and-args
           [[cons fun args]
            (syntax-case args
              [() [pure fun]]
              [[cons arg0 more-args]
               [pure
                [cons-list-syntax
                  'my-app
                  [cons-list-syntax
                    [list-syntax ['#%app fun arg0] stx]
                    more-args
                    stx]
                  stx]]])])])]]
   -- (my-lam (x y z) body
   -- =>
   -- (lambda (x)
   --   (lambda (y)
   --     (lambda (z)
   --       body)))
   [my-lam
    [lambda [stx]
     (syntax-case stx
       [[list [_ args body]]
        (syntax-case args
          [() [pure body]]
          [[cons arg0 more-args]
           [pure [list-syntax ['lambda
                               [list-syntax [arg0] arg0]
                               [list-syntax ['my-lam more-args body] stx]]
                           stx]]]
          [[list [arg]]
           [pure [list-syntax ['lambda args body] stx]]])])]])]

[define-macros
  -- (f foo bar baz) => (my-app foo bar baz)
  ([#%app
    [lambda [stx]
     (syntax-case stx
      [[cons _ args]
       [pure [cons-list-syntax 'my-app args stx]]])]])]

[define-macros
  -- (lambda (x y z) ...) => (my-lam (x y z) ...)
  ([lambda
    [lambda [stx]
     (syntax-case stx
      [[list [_ args body]]
       [pure [list-syntax ['my-lam args body] stx]]])]])]

(define-macros
  ([flet*
    (lambda (stx)
      (syntax-case stx
        [(list (_ fun body))
         (syntax-case fun
           [(list (name args def))
            (syntax-case args
              [(cons arg more-args)
               (pure (list-syntax
                      ('flet
                       (list-syntax (name
                                     (list-syntax (arg) stx)
                                     (list-syntax ('lambda more-args def) stx))
                                    stx)
                       body)
                      stx))])])]))])) 

(define-macros
  ([flet (lambda (stx)
           (syntax-case stx
             [(cons _ rest)
              (pure (cons-list-syntax 'flet* rest stx))]))]))

[define id [lambda (x) x]]

[define const [lambda (x y) x]]

[example (const 'a 'b)]

[define compose [lambda (f g x) (f (g x))]]

[example (compose id)]
[example (compose id id)]
[example (compose id id id)]

(define compose* (flet (comp (f g x) (f (g x))) comp))

[example (compose* id)]
[example (compose* id id)]
[example (compose* id id id)]


(export #%module #%app
        const lambda define example define-macros quote meta if
        error
        let flet
        import export
        >>= pure syntax-error syntax-case
        list-syntax cons-list-syntax empty-list-syntax replace-loc
        free-identifier=? bound-identifier=? log
        datatype case)

