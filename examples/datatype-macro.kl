#lang "prelude.kl"
(import "defun.kl")
(import (shift "prelude.kl" 1))
(import (shift "lispy-do.kl" 1))
(import (shift "let.kl" 1))
(import (shift "dot-dot-dot.kl" 1))
(import (shift (only "list-syntax.kl" map) 1))


(datatype (List A)
  (nil)
  (:: A (List A)))

(defun snoc (xs x)
  (case xs
    [(nil) (:: x (nil))]
    [(:: y ys) (:: y (snoc ys x))]))

(defun reverse (xs)
  (case xs
    [(nil) (nil)]
    [(:: x xs) (snoc (reverse xs) x)]))

(define-macros
  ([list
     (lambda (stx)
       (syntax-case stx ()
         [(_)
          (pure (replace-loc stx '(nil)))]
         [(_ ,x ,xs ...)
          (pure (replace-loc stx
                  `(:: ,x (list ,xs ...))))]))]))

(example (reverse (:: 1 (:: 2 (:: 3 (nil))))))

(example (reverse (list 1 2 3)))

(define-macros
  ([null (lambda (stx) (pure '(nil)))]))

(define-macros
  ([head
    (lambda (stx)
     (syntax-case stx ()
       [(_ ,x)
        (pure (replace-loc stx
                `(:: ,x xs)))]))]))

(example (case (reverse null) [null 'a]))

(example (case (reverse (list 1 2 3)) [(head x) x]))
         
