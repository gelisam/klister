#lang "prelude.kl"

(import (shift "prelude.kl" 1))
(import (shift "dot-dot-dot.kl" 1))
(import "dot-dot-dot.kl")
(import "define-syntax-rule.kl")


(define-macros
  ([m (lambda (stx)
        (>>= (which-problem)
          (lambda (prob)
            (case prob
              [(declaration)  (pure '(example (the (m) (m))))]
              [(type)         (pure 'Bool)]
              [(expression t) (pure 'true)]
              [(pattern)      (pure 'unit)]))))]))

(m)

(example (case unit
           ((m) true)))


(define-macro (mega-const e)
  (>>= (which-problem)
       (lambda (prob)
          (case prob
            [(expression t)
             (type-case t
               [(-> a b)
                (pure `(lambda (_)
                         (mega-const ,e)))]
               [(else x) (pure e)])]))))

(example (the (-> Bool Bool Bool Bool Unit) (mega-const unit)))

(define-macros
  ([llet (lambda (stx)
          (syntax-case stx ()
            [(_ (,name ,def) ,body)
             (pure (replace-loc stx
                     `((lambda (,name) ,body) ,def)))]))]))

(example (llet (x (mega-const unit)) (the (-> Bool Bool Bool Bool Unit) x)))


(datatype (Both A) (both A A))

(example (both (lambda (x) (lambda (y) (lambda (z) 'hello))) (mega-const 'world)))
(example (both (mega-const 'hello) (lambda (x) (lambda (y) (lambda (z) 'world)))))

      
