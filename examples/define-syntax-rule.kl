#lang "prelude.kl"

(import (shift "prelude.kl" 1))
(import (shift "do.kl" 1))
(import (shift "list.kl" 1))
(import (shift "list-syntax.kl" 1))
(import (shift "quasiquote.kl" 1))
(import (shift "syntax.kl" 1))

-- (define-macro (lambda2 x y body)
--   (pure `(lambda (,x ,y) ,body)))
(define-macros
  ((define-macro
     (lambda (stx)
       (syntax-case stx
         ((list (_ pattern body))
          (syntax-case pattern
           ((cons macro-name args)
            (pure `(define-macros
                     ([,macro-name (lambda (stx)
                                     (syntax-case stx
                                      ((list ,pattern)
                                       ,body)))])))))))))))

-- (define-variadic-macro (lambda2 stx)
--   (case (open-syntax stx)
--     [(list-contents (list _ x y body))
--      (pure `(lambda (,x ,y) ,body))]))
(define-macro (define-variadic-macro macro-stx body)
  (case (open-syntax macro-stx)
    [(list-contents (list macro-name stx-name))
     (pure `(define-macros
              ([,macro-name (lambda (,stx-name)
                              ,body)])))]))

-- (define-syntax-rule (lambda2 x y body)
--   (lambda (x y) body))
(define-variadic-macro (define-syntax-rule stx)
  (syntax-case stx
    ((list (_ pattern template))
     (syntax-case pattern
      ((cons macro-name args)
       (do (unquoted-template <- (foldlM (lambda (t arg)
                                           (replace-identifier
                                             arg
                                             (list-syntax ('unquote arg) stx)
                                             t))
                                         template
                                         args))
           (quasiquoted-template <- (pure (list-syntax ('quasiquote unquoted-template) stx)))
           (pure `(define-macros
                    ([,macro-name (lambda (stx)
                                    (syntax-case stx
                                     ((list ,pattern)
                                      (pure ,quasiquoted-template))))])))))))))

-- If you have a value (the (Macro Syntax) action), you cannot test it using
-- (example action) because that will print the Macro action instead of running
-- it. Use (example-macro-syntax action) instead.
--
-- (example-macro-syntax
--   (>>= (bound-identifier=? 'x 'x)
--     (lambda-case
--       [(true)
--        (pure '"equal")]
--       [(false)
--        (pure '"not-equal")])))
--
-- Note that the action runs at the meta level, so any identifiers it uses
-- must be defined at the meta level as well.
--
-- (meta
--   (define equal '"equal")
--   (define not-equal '"not-equal"))
-- (example-macro-syntax
--   (>>= (bound-identifier=? 'x 'x)
--     (lambda-case
--       [(true)
--        (pure equal)]
--       [(false)
--        (pure not-equal)])))
(define-syntax-rule (example-macro-syntax action)
  (group
    (define-macro (my-macro)
      action)
    (example (my-macro))))

(export
  define-macro
  define-variadic-macro
  define-syntax-rule
  example-macro-syntax)
