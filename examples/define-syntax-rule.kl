#lang "prelude.kl"

(import (rename (shift "prelude.kl" 1) [syntax-case raw-syntax-case]))
(import (shift "prelude.kl" 1))
(import (shift "do.kl" 1))
(import (shift "list-syntax.kl" 1))
(import (shift "dot-dot-dot.kl" 1))
(import (shift "syntax.kl" 1))

(define-macros
  ([define-macro
     (lambda (stx)
       (syntax-case stx ()
         [(_ (,macro-name ,args ...) ,body)
          (pure `(define-macros
                   ([,macro-name
                     (lambda (stx)
                       (raw-syntax-case stx
                         [(list (_ ,args ...))
                          ,body]))])))]))]))

(define-macros
  ([define-syntax-rule
     (lambda (stx)
       (syntax-case stx ()
         [(_ (,macro-name ,args ...) ,template)
          (do (unquoted-template <- (foldlM (lambda (t arg)
                                              (replace-identifier arg `(,'unquote ,arg) t))
                                            template
                                            args))
              (quasiquoted-template <- (pure `(,'quasiquote ,unquoted-template)))
              (pure `(define-macros
                       ([,macro-name
                        (lambda (stx)
                          (raw-syntax-case stx
                            [(list (_ ,args ...))
                             (pure ,quasiquoted-template)]))]))))]))]))

(define-syntax-rule (lambda2 x y body)
  (lambda (x y) body))

(example ((lambda2 x y y) 'foo 'bar))  -- 'bar

(export define-macro define-syntax-rule)
