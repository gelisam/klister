(pair "open-syntax" #<open-syntax>) : (Pair String (Syntax → (Syntax-Contents Syntax)))
(pair "close-syntax" #<close-syntax>) : (Pair String (Syntax → (Syntax → ((Syntax-Contents Syntax) → Syntax))))
(pair "+" #<+>) : (Pair String (Integer → (Integer → Integer)))
(pair "-" #<->) : (Pair String (Integer → (Integer → Integer)))
(pair "*" #<*>) : (Pair String (Integer → (Integer → Integer)))
(pair "/" #</>) : (Pair String (Integer → (Integer → Integer)))
(pair "abs" #<abs>) : (Pair String (Integer → Integer))
(pair "negate" #<negate>) : (Pair String (Integer → Integer))
(pair ">" #<>>) : (Pair String (Integer → (Integer → Bool)))
(pair ">=" #<>=>) : (Pair String (Integer → (Integer → Bool)))
(pair "<" #<<>) : (Pair String (Integer → (Integer → Bool)))
(pair "<=" #<<=>) : (Pair String (Integer → (Integer → Bool)))
(pair "=" #<=>) : (Pair String (Integer → (Integer → Bool)))
(pair "/=" #</=>) : (Pair String (Integer → (Integer → Bool)))
(pair "integer->string" #<integer->string>) : (Pair String (Integer → String))
(pair "string-append" #<string-append>) : (Pair String (String → (String → String)))
(pair "substring" #<substring>) : (Pair String (Integer → (Integer → (String → (Maybe String)))))
(pair "string-length" #<string-length>) : (Pair String (String → Integer))
(pair "string=?" #<=>) : (Pair String (String → (String → Bool)))
(pair "string/=?" #</=>) : (Pair String (String → (String → Bool)))
(pair "string<?" #<<>) : (Pair String (String → (String → Bool)))
(pair "string<=?" #<<=>) : (Pair String (String → (String → Bool)))
(pair "string>?" #<>>) : (Pair String (String → (String → Bool)))
(pair "string>=?" #<>=>) : (Pair String (String → (String → Bool)))
(pair "string-upcase" #<string-upcase>) : (Pair String (String → String))
(pair "string-downcase" #<string-downcase>) : (Pair String (String → String))
(pair "string-titlecase" #<string-titlecase>) : (Pair String (String → String))
(pair "string-foldcase" #<string-foldcase>) : (Pair String (String → String))
(pair "pure-IO" #<pure-IO>) : ∀(α : *). (Pair String (α → (IO α)))
(pair "bind-IO" #<bind-IO>) : ∀(α : *) (β : *). (Pair String ((IO α) → ((α → (IO β)) → (IO β))))
(flip) : ScopeAction
(add) : ScopeAction
(remove) : ScopeAction
(unit) : Unit
(true) : Bool
(false) : Bool
(module) : Problem
(declaration) : Problem
(type) : Problem
(pattern) : Problem
(type-pattern) : Problem
(nothing) : ∀(α : *). (Maybe α)
(nil) : ∀(α : *). (List α)
make-introducer : (Macro (ScopeAction → (Syntax → Syntax)))
which-problem : (Macro Problem)
(pair "id" #<x>) : ∀(α : *). (Pair String (α → α))
(pair "const" #<x>) : ∀(α : *) (β : *). (Pair String (α → (β → α)))
(pair "compose" #<f>) : ∀(α : *) (β : *) (γ : *). (Pair String ((α → β) → ((γ → α) → (γ → β))))
(pair "stdout" #<output port>) : (Pair String Output-Port)
(pair "write" #<write>) : (Pair String (Output-Port → (String → (IO Unit))))
