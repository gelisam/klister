#lang "prelude.kl"

(import (shift "prelude.kl" 1))
(import (shift "dot-dot-dot.kl" 1))
(import (shift "do-keywords.kl" 1))
(import "do-keywords.kl")

(define-macros
  -- (do (x <- foo)
  --     (bar x)
  --     (y <- baz x)
  --     (quux x y))
  -- =>
  -- (>>= foo (lambda (x)
  --            (>>= (bar x) (lambda (_)
  --                           (>>= (baz x) (lambda (y)
  --                                          (quux x y)))))))
  ([do (lambda (stx)
         (syntax-case stx (<-)
          [(_ ,last-action)
           (pure last-action)]
          [(_ (,var <- ,action) ,actions ...)
           (pure `(>>= ,action
                    (lambda (,var)
                      (do ,actions ...))))]
          [(_ ,action ,actions ...)
           (pure `(>>= ,action
                    (lambda (_)
                      (do ,actions ...))))]))]))

(export <- do)
