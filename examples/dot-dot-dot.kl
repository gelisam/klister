#lang "prelude.kl"
-- GENERATED BY ../bootstrap.rkt, DO NOT EDIT

(import (rename "prelude.kl"
                (define-macros
                 raw-define-macros)))

(import (rename "prelude.kl"
                (syntax-case
                 raw-syntax-case)))

(import (rename (shift "prelude.kl" 1)
                (syntax-case
                 raw-syntax-case)))

(example
 (cons-list-syntax
  '1
  '(2 3 4)
  'raw-stx))

(defun
 pair-list-syntax
 (head tail raw-stx)
 (cons-list-syntax
  head
  (cons-list-syntax tail '() raw-stx)
  raw-stx))

(example
 (pair-list-syntax '1 '2 'raw-stx))

(defun
 append-list-syntax
 (list tail raw-stx)
 (raw-syntax-case
  list
  (() tail)
  ((cons car cdr)
   (cons-list-syntax
    car
    (append-list-syntax
     cdr
     tail
     raw-stx)
    raw-stx))))

(example
 (append-list-syntax
  '(1 2 3)
  '(4 5 6)
  'raw-stx))

(example
 (let (raw-stx 'raw-stx)
   (pair-list-syntax
    'quote
    (cons-list-syntax
     '1
     (cons-list-syntax
      '(2 3)
      (append-list-syntax
       '(4 5)
       (cons-list-syntax '6 '() raw-stx)
       raw-stx)
      raw-stx)
     raw-stx)
    raw-stx)))

(raw-define-macros
 ((keyword
   (lambda (raw-stx)
     (syntax-error
      '"keyword used out of context"
      raw-stx)))
  (my-macro
   (lambda (raw-stx)
     (let (failure-cc
           (lambda ()
             (syntax-error
              '"my-macro call has invalid syntax"
              raw-stx)))
       (let (failure-cc
             (lambda ()
               (raw-syntax-case
                raw-stx
                ((cons
                  head-155
                  tail-156)
                 (let (_ head-155)
                   (raw-syntax-case
                    tail-156
                    ((cons
                      head-157
                      tail-158)
                     (raw-syntax-case
                      head-157
                      ((cons
                        head-159
                        tail-160)
                       (let (foo
                             head-159)
                         (let (tail
                               tail-160)
                           (raw-syntax-case
                            tail-158
                            (()
                             (let (stx
                                   tail)
                               (pure
                                (cons-list-syntax
                                 'quote
                                 (cons-list-syntax
                                  stx
                                  '()
                                  raw-stx)
                                 raw-stx))))
                            (_
                             (failure-cc))))))
                      (_ (failure-cc))))
                    (_ (failure-cc)))))
                (_ (failure-cc)))))
         (let (failure-cc
               (lambda ()
                 (raw-syntax-case
                  raw-stx
                  ((cons
                    head-161
                    tail-162)
                   (let (_ head-161)
                     (raw-syntax-case
                      tail-162
                      ((cons
                        head-163
                        tail-164)
                       (raw-syntax-case
                        head-163
                        ((cons
                          head-165
                          tail-166)
                         (raw-syntax-case
                          head-165
                          ((cons
                            head-173
                            tail-174)
                           (let (a
                                 head-173)
                             (raw-syntax-case
                              tail-174
                              ((cons
                                head-175
                                tail-176)
                               (let (b
                                     head-175)
                                 (raw-syntax-case
                                  tail-176
                                  (()
                                   (raw-syntax-case
                                    tail-166
                                    ((cons
                                      head-167
                                      tail-168)
                                     (raw-syntax-case
                                      head-167
                                      ((cons
                                        head-169
                                        tail-170)
                                       (let (c
                                             head-169)
                                         (raw-syntax-case
                                          tail-170
                                          ((cons
                                            head-171
                                            tail-172)
                                           (let (d
                                                 head-171)
                                             (raw-syntax-case
                                              tail-172
                                              (()
                                               (raw-syntax-case
                                                tail-168
                                                (()
                                                 (raw-syntax-case
                                                  tail-164
                                                  (()
                                                   (let (stx
                                                         (cons-list-syntax
                                                          a
                                                          (cons-list-syntax
                                                           b
                                                           (cons-list-syntax
                                                            c
                                                            (cons-list-syntax
                                                             d
                                                             '()
                                                             raw-stx)
                                                            raw-stx)
                                                           raw-stx)
                                                          raw-stx))
                                                     (pure
                                                      (cons-list-syntax
                                                       'quote
                                                       (cons-list-syntax
                                                        stx
                                                        '()
                                                        raw-stx)
                                                       raw-stx))))
                                                  (_
                                                   (failure-cc))))
                                                (_
                                                 (failure-cc))))
                                              (_
                                               (failure-cc)))))
                                          (_
                                           (failure-cc)))))
                                      (_
                                       (failure-cc))))
                                    (_
                                     (failure-cc))))
                                  (_
                                   (failure-cc)))))
                              (_
                               (failure-cc)))))
                          (_
                           (failure-cc))))
                        (_
                         (failure-cc))))
                      (_
                       (failure-cc)))))
                  (_ (failure-cc)))))
           (failure-cc))))))))

(example (my-macro ((1 2) (3 4))))

(example (my-macro (keyword foo bar)))
