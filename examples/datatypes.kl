#lang kernel

(datatype (Nat)
  (zero)
  (add1 (Nat)))

(datatype (List A)
  (nil)
  (:: A (List A)))

(datatype (Tree A)
  (leaf)
  (branch (Tree A) A (Tree A)))

(datatype (Either A B)
  (left A)
  (right B))

(define nothing (zero))

(define something (add1 (add1 (zero))))

(example (left (branch (branch (leaf) (zero) (leaf)) (add1 (zero)) (leaf))))
(example (right (right (right (nil)))))


(define double
  (flet (f (n)
          (case n
            [(zero) (zero)]
            [(add1 k) (add1 (add1 (f k)))]))
    f))

(example (double (add1 (add1 (zero)))))

(define flop
  (lambda (either)
    (case either
      [(left a) (right a)]
      [(right b) (left b)])))

(example (flop (left #true)))
(example (flop (right (:: (add1 (zero)) (nil)))))

(define plus
  (flet (f (n)
          (case n
            [(zero) (lambda (k) k)]
            [(add1 n*) (lambda (k) ((f n*) (add1 k)))]))
    f))

(example
  (flet (plus* (n)
          (case n
            [(zero) (lambda (k) k)]
            [(add1 n*) (lambda (k) ((plus* n*) (add1 k)))]))
    plus*))

(example ((plus (add1 (add1 (zero)))) (add1 (add1 (add1 (zero))))))

(datatype (Alphabet)
  (a) (b) (c) (d) (e) (f) (g) (h) (i) (j) (k) (l) (m) (n)
  (o) (p) (q) (r) (s) (t) (u) (v) (x) (y) (z) (æ) (ø) (å))

(example
  (lambda (letter)
   (case letter
    [(a) 1]
    [(b) 2]
    [(c) 3]
    [(d) 4]
    [(e) 5]
    [(f) 6]
    [(g) 7]
    [(h) 8]
    [(i) 9]
    [(j) 10]
    [(k) 11]
    [(l) 12]
    [(m) 13]
    [(n) 14]
    [(o) 15]
    [(p) 16]
    [(q) 17]
    [(r) 18]
    [(s) 19]
    [(t) 20]
    [(u) 21]
    [(v) 22]
    [(x) 23]
    [(y) 24]
    [(z) 25]
    [(æ) 26]
    [(ø) 27]
    [(å) 28])))

(define vowel?
  (lambda (letter)
    (case letter
      [(a) #true]
      [(e) #true]
      [(i) #true]
      [(o) #true]
      [(u) #true]
      [(y) #true]
      [(æ) #true]
      [(ø) #true]
      [(å) #true]
      [(else x) #false])))
(example vowel?)
(example (vowel? (y)))
(example (vowel? (x)))

(export Nat zero add1)
