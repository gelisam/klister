#lang "prelude.kl"

(import (shift "prelude.kl" 1))
(import (shift "dot-dot-dot.kl" 1))

(define not
  (lambda (b)
    (if b (false) (true))))

(define binary-and
  (lambda (x y)
    (if x y (false))))

(define binary-or
  (lambda (x y)
    (if x (true) y)))

(define-macros
  ([and (lambda (stx)
          (syntax-case stx ()
            [(_)
             (pure '(true))]
            [(_ ,x ,xs ...)
             (pure `(binary-and ,x (and ,xs ...)))]))]
   [or (lambda (stx)
         (syntax-case stx ()
           [(_)
            (pure '(false))]
           [(_ ,x ,xs ...)
            (pure `(binary-or ,x (or ,xs ...)))]))]))

(example (binary-and (false) (false)))
(example (binary-and (false) (true)))
(example (binary-and (true) (false)))
(example (binary-and (true) (true)))

(example (binary-or (false) (false)))
(example (binary-or (false) (true)))
(example (binary-or (true) (false)))
(example (binary-or (true) (true)))

(example (and))
(example (and (false)))
(example (and (true)))
(example (and (true) (false)))
(example (and (true) (true)))
(example (and (true) (false) (true)))
(example (and (true) (true) (true)))

(example (or))
(example (or (true)))
(example (or (false)))
(example (or (false) (true)))
(example (or (false) (false)))
(example (or (false) (true) (false)))
(example (or (false) (false) (false)))

(export not binary-and binary-or and or)
