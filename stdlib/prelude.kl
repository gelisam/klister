#lang kernel

(import "bool.kl")
(import "builtins.kl")
(import "defun.kl")
(import "n-ary-app.kl")
(import "quasiquote.kl")

(defun id (x) x)
(define const (lambda (x y) x))
(define compose (lambda (f g x) (f (g x))))

(export -- primitive types
        Syntax
        ->
        Integer + - * / abs negate > >= < <= = /= integer->string
        Macro
        Type
        String string-append substring string-length
               string=? string/=? string<? string<=? string>? string>=?
               string-upcase string-downcase string-titlecase string-foldcase
        IO pure-IO bind-IO

        -- primitive datatypes
        ScopeAction flip add remove
        Unit unit
        Bool true false
        Problem declaration expression type pattern
        Maybe nothing just

        -- primitive module macros
        #%module

        -- primitive declaration macros
        define
        datatype
        define-macros
        example
        run
        import
        export
        meta
        group

        -- primitive expression macros
        oops
        error
        the
        let
        flet
        lambda
        #%app
        pure
        >>=
        syntax-error
        bound-identifier=?
        free-identifier=?
        quote
        ident
        ident-syntax
        empty-list-syntax
        cons-list-syntax
        list-syntax
        string-syntax
        replace-loc
        syntax-case
        let-syntax
        log
        make-introducer
        which-problem
        case
        type-case

        -- primitive patterns
        else

        -- primitive universal macros
        with-unknown-type

        -- non-primitive declaration macros
        defun

        -- IO primitives
        Output-Port
        stdout
        write

        -- non-primitive expression macros
        unquote
        quasiquote
        quasiquote/loc

        -- non-primitive expressions
        if
        id
        const
        compose
        -- Bool
        not
        binary-and
        binary-or
        and
        or)
