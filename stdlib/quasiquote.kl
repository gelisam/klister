#lang kernel

[import [shift kernel 1]]
[import [shift "n-ary-app.kl" 1]]
[import [shift "defun.kl" 1]]

(meta
  (defun map-syntax (f stx)
    (case (open-syntax stx)
      [(list-contents ()) stx]
      [(list-contents (cons a d))
       (close-syntax stx (cons (f a) (map-syntax f d)))]
      [_ stx])))

[define-macros
  ([unquote
    [lambda (stx)
      (syntax-error (list (quote "unquote used out of context") stx) stx)]]
   [quasiquote
    [lambda (stx)
      (case (open-syntax stx)
        [(list-contents (list _ e))
         (case (open-syntax e)
           [(identifier-contents x)
            (pure (close-syntax x (list (quote quote) x)))]
           [(integer-contents int)
            (pure (close-syntax e (list (quote quote) (close-syntax e int))))]
           [(string-contents str)
            (pure (close-syntax e (list (quote quote) (close-syntax e str))))]
           [(list-contents ())
            (pure (close-syntax e (list (quote quote) (close-syntax e '()))))]
           [(list-contents (cons x y))
            (case (open-syntax x)
              [(identifier-contents i)
               (>>= (free-identifier=? i (quote unquote))
                 (lambda (unquote?)
                   (if unquote?
                       (case (open-syntax y)
                         [(list-contents (list v)) (pure v)]
                         [_ (syntax-error (quote "wrong number of arguments to unquote") e)])
                       (pure
                        (close-syntax e (list (quote list) -- Assuming 'list replaces 'list-syntax for constructing lists of syntax
                                        (map-syntax (lambda (s)
                                                      (close-syntax s (list (quote quasiquote) s)))
                                                    e)
                                        (close-syntax e (list (quote quote) e))))))))]
              [_ (pure
                  (close-syntax e (list (quote list) -- Assuming 'list replaces 'list-syntax
                                  (map-syntax (lambda (s)
                                                (close-syntax s (list (quote quasiquote) s)))
                                              e)
                                  (close-syntax e (list (quote quote) e)))))]])]
        [_ (syntax-error (list (quote "bad syntax") stx) stx)])]])]

(define-macros
  ([quasiquote/loc
    (lambda (stx)
      (case (open-syntax stx)
        [(list-contents (list _ loc q))
         (pure (close-syntax stx (list (quote replace-loc) loc (close-syntax stx (list (quote quasiquote) q)))))]))]))

(export unquote quasiquote quasiquote/loc)
