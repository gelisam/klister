#lang kernel

(import (shift kernel 1))
(import (shift "n-ary-app.kl" 1))
(import (shift "quasiquote.kl" 1))

(import "n-ary-app.kl")
(import "defun.kl")

(defun foldr (f base lst)
  (case lst
    [(:: x xs)
     (f x (foldr f base xs))]
    [(nil)
     base]))

(defun map (f lst)
  (foldr
    (lambda (elem accum) (:: (f elem) accum))
    (nil)
    lst))

(defun traverse (f)
  (foldr
    (lambda (a mk-bs)
      (>>= (f a)
        (lambda (b)
          (>>= (mk-bs)
            (lambda (bs)
              (pure (:: b bs)))))))
    (pure (nil))))

(defun filter (predicate lst)
  (foldr
    (lambda (elem accum)
      (if (predicate elem)
        (:: elem accum)
        accum))
    (nil)
    lst))

(defun snoc (xs x)
  (case xs
    [(nil) (:: x (nil))]
    [(:: y ys) (:: y (snoc ys x))]))

(defun reverse (xs)
  (case xs
    [(nil) (nil)]
    [(:: x xs) (snoc (reverse xs) x)]))

(defun syntax->list (stx)
  (syntax-case stx
    [() (nil)]
    [(cons x xs) (:: x (syntax->list xs))]))

(defun list->syntax (xs0 stx)
  (case xs0
    [(nil)
     (empty-list-syntax stx)]
   [(:: x xs)
    (cons-list-syntax x
      (list->syntax xs stx)
      stx)]))


(define-macros
  ([list
     (lambda (stx)
       (syntax-case stx
         [(cons _ more)
          (syntax-case more
           [()
            (pure (replace-loc more '(nil)))]
           [(cons x xs)
            (pure (quasiquote/loc more (:: ,x ,(cons-list-syntax 'list xs xs))))])]))]))

(export List nil :: foldr map traverse filter snoc reverse syntax->list list->syntax list)
